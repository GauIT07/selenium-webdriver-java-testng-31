package webdriver;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.firefox.FirefoxDriver;import org.testng.Assert;import org.testng.annotations.AfterClass;import org.testng.annotations.BeforeClass;import org.testng.annotations.Test;import java.util.concurrent.TimeUnit;public class Topic_07_WebElement_Command_BT {    WebDriver driver;    @BeforeClass    public void beforeClass() {        driver = new FirefoxDriver();        driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);        driver.manage().window().maximize();    }    @Test    public void TC_01_Element_isDisplayed() {        driver.get("https://automationfc.github.io/basic-form/index.html");        // Nếu như mong đợi 1 element hiển thị thì verifyTrue        // Nếu như mong đợi 1 element ko hiển thị thì verifyFalse        // isDisplayed() = true | false        Assert.assertTrue(driver.findElement(By.cssSelector("input#mail")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("input#under_18")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("textarea#edu")).isDisplayed());        Assert.assertFalse(driver.findElement(By.xpath("//h5[text()='Name: User5']")).isDisplayed());        if (driver.findElement(By.cssSelector("input#mail")).isDisplayed()) {            driver.findElement(By.cssSelector("input#mail")).sendKeys("Automation Testing");            System.out.println("Email Textbox is displayed");        } else {            System.out.println("Email Textbox is not displayed");        }        if (driver.findElement(By.cssSelector("input#under_18")).isDisplayed()) {            driver.findElement(By.cssSelector("input#under_18")).click();            System.out.println("Under 18 Radio is displayed");        } else {            System.out.println("Under 18 Radio is not displayed");        }        if (driver.findElement(By.cssSelector("textarea#edu")).isDisplayed()) {            driver.findElement(By.cssSelector("textarea#edu")).sendKeys("Automation Testing");            System.out.println("Education TextArea is displayed");        } else {            System.out.println("Education TextArea is not displayed");        }        if (driver.findElement(By.xpath("//h5[text()='Name: User5']")).isDisplayed()) {            System.out.println("Name User5 is displayed");        } else {            System.out.println("Name User5 is not displayed");        }    }    @Test    public void TC_02_Element_isEnable() {        driver.get("https://automationfc.github.io/basic-form/index.html");        if (driver.findElement(By.cssSelector("input#mail")).isEnabled()) {            System.out.println("Email textbox is enable");        } else {            System.out.println("Email textbox is disable");        }        if (driver.findElement(By.cssSelector("input#under_18")).isEnabled()) {            System.out.println("Under 18 Radio is enable");        } else {            System.out.println("Under 18 Radio is disable");        }        if (driver.findElement(By.cssSelector("textarea#edu")).isEnabled()) {            System.out.println("Education TextArea is enable");        } else {            System.out.println("Education TextArea is disable");        }        if (driver.findElement(By.cssSelector("select[id='job1']")).isEnabled()) {            System.out.println("Job Role 1 Dropdown is enable");        } else {            System.out.println("Job Role 1 Dropdown is disable");        }        if (driver.findElement(By.cssSelector("input#development")).isEnabled()) {            System.out.println("Development Checkbox is enable");        } else {            System.out.println("Development Checkbox is disable");        }        if (driver.findElement(By.cssSelector("input[id='slider-1']")).isEnabled()) {            System.out.println("Slider-01 is enable");        } else {            System.out.println("Slider-01 is disable");        }        if (driver.findElement(By.cssSelector("input#disable_password")).isEnabled()) {            System.out.println("Password is enable");        } else {            System.out.println("Password is disable");        }        if (driver.findElement(By.cssSelector("input#radio-disabled")).isEnabled()) {            System.out.println("Age Radio Button is enable");        } else {            System.out.println("Age Radio Button is disable");        }        if (driver.findElement(By.cssSelector("select[id='job3']")).isEnabled()) {            System.out.println("Job Role 03 is enable");        } else {            System.out.println("Job Role 03 is disable");        }        if (driver.findElement(By.cssSelector("input#check-disbaled")).isEnabled()) {            System.out.println("Interests Checkbox is enable");        } else {            System.out.println("Interests Checkbox is disable");        }        if (driver.findElement(By.cssSelector("input[id='slider-2']")).isEnabled()) {            System.out.println("Slider 02 is enable");        } else {            System.out.println("Slider 02 is disable");        }    }    @Test    public void TC_03_Element_isSelected() {        driver.get("https://automationfc.github.io/basic-form/index.html");        //isSelected chỉ dùng 3 element: checkbox, radio, dropdown        driver.findElement(By.cssSelector("input#under_18")).click();        driver.findElement(By.cssSelector("input#java")).click();        Assert.assertTrue(driver.findElement(By.cssSelector("input#under_18")).isSelected());        Assert.assertTrue(driver.findElement(By.cssSelector("input#java")).isSelected());        if (driver.findElement(By.cssSelector("input#under_18")).isSelected()) {            System.out.println("Under 18 Checkbox is selected");        } else {            System.out.println("Under 18 Checkbox is de-selected");        }        if (driver.findElement(By.cssSelector("input#java")).isSelected()) {            System.out.println("Java Checkbox is selected");        } else {            System.out.println("Java Checkbox is de-selected");        }        driver.findElement(By.cssSelector("input#java")).click();        sleepInSecond(2);        Assert.assertTrue(driver.findElement(By.cssSelector("input#under_18")).isSelected());        // Kiểm tra không được chọn thì dùng hàm Assert.assertFalse -> kết quả false:false -> pass        Assert.assertFalse(driver.findElement(By.cssSelector("input#java")).isSelected());        if (driver.findElement(By.cssSelector("input#under_18")).isSelected()) {            System.out.println("Under 18 Checkbox is selected");        } else {            System.out.println("Under 18 Checkbox is de-selected");        }        if (driver.findElement(By.cssSelector("input#java")).isSelected()) {            System.out.println("Java Checkbox is selected");        } else {            System.out.println("Java Checkbox is de-selected");        }    }    @Test    public void TC_04_Register_MailChimp() {        driver.get("https://login.mailchimp.com/signup/");        driver.findElement(By.cssSelector("input#email")).sendKeys("test@yopmail.com");        // Nhập số        driver.findElement(By.cssSelector("input#new_password")).sendKeys("123");        Assert.assertTrue(driver.findElement(By.cssSelector("li.lowercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.uppercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.number-char.completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.special-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li[class='8-char not-completed']")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.username-check.completed")).isDisplayed());        sleepInSecond(2);        // Nhập chữ thường        driver.findElement(By.cssSelector("input#new_password")).clear();        driver.findElement(By.cssSelector("input#new_password")).sendKeys("abc");        Assert.assertTrue(driver.findElement(By.cssSelector("li.lowercase-char.completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.uppercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.number-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.special-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li[class='8-char not-completed']")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.username-check.completed")).isDisplayed());        sleepInSecond(2);        // Nhập chữ hoa        driver.findElement(By.cssSelector("input#new_password")).clear();        driver.findElement(By.cssSelector("input#new_password")).sendKeys("ABC");        Assert.assertTrue(driver.findElement(By.cssSelector("li.lowercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.uppercase-char.completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.number-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.special-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li[class='8-char not-completed']")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.username-check.completed")).isDisplayed());        sleepInSecond(2);        // Nhập ký tự đặc biệt        driver.findElement(By.cssSelector("input#new_password")).clear();        driver.findElement(By.cssSelector("input#new_password")).sendKeys("!@#$%");        Assert.assertTrue(driver.findElement(By.cssSelector("li.lowercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.uppercase-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.number-char.not-completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.special-char.completed")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li[class='8-char not-completed']")).isDisplayed());        Assert.assertTrue(driver.findElement(By.cssSelector("li.username-check.completed")).isDisplayed());        sleepInSecond(2);        // Nhập trên 8 ký tự        driver.findElement(By.cssSelector("input#new_password")).clear();        driver.findElement(By.cssSelector("input#new_password")).sendKeys("Abc12345@@@@");        Assert.assertFalse(driver.findElement(By.cssSelector("li.lowercase-char.completed")).isDisplayed());        Assert.assertFalse(driver.findElement(By.cssSelector("li.uppercase-char.completed")).isDisplayed());        Assert.assertFalse(driver.findElement(By.cssSelector("li.number-char.completed")).isDisplayed());        Assert.assertFalse(driver.findElement(By.cssSelector("li.special-char.completed")).isDisplayed());        Assert.assertFalse(driver.findElement(By.cssSelector("li[class='8-char completed']")).isDisplayed());        Assert.assertFalse(driver.findElement(By.cssSelector("li.username-check.completed")).isDisplayed());        sleepInSecond(2);    }    @AfterClass    public void afterClass() {        driver.quit();    }    public void sleepInSecond(long timeInSecond) {        try {            Thread.sleep(timeInSecond * 1000);        } catch (InterruptedException e) {            throw new RuntimeException(e);        }    }}